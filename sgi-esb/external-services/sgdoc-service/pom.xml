<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.3.9.RELEASE</version>
    <relativePath /> <!-- lookup parent from repository -->
  </parent>
  <groupId>org.crue.hercules.sgi</groupId>
  <artifactId>sgi-sgdoc-service</artifactId>
  <version>0.2.0</version>
  <name>sgi-sgdoc-service</name>
  <description>Servicios del Sistema de Gesti√≥n de Documentos</description>
  <dependencies>
    <dependency>
      <groupId>org.crue.hercules.sgi</groupId>
      <artifactId>sgi-framework-spring</artifactId>
      <version>${sgi-framework-spring.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <version>1.4.200</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>com.microsoft.sqlserver</groupId>
      <artifactId>mssql-jdbc</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.hazelcast</groupId>
      <artifactId>hazelcast</artifactId>
    </dependency>
    <dependency>
      <groupId>com.hazelcast</groupId>
      <artifactId>hazelcast-spring</artifactId>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
      <groupId>org.liquibase</groupId>
      <artifactId>liquibase-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-jpamodelgen</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
    </dependency>
    <dependency>
      <groupId>org.modelmapper</groupId>
      <artifactId>modelmapper</artifactId>
    </dependency>
    <dependency>
      <groupId>com.oracle.ojdbc</groupId>
      <artifactId>ojdbc8</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
      <version>2.0.1.Final</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-client</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.github.tomakehurst</groupId>
      <artifactId>wiremock-jre8</artifactId>
      <version>${wiremock.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <properties>
    <java.version>1.8</java.version>
    <sgi-framework-spring.version>0.0.5</sgi-framework-spring.version>
    <wiremock.version>2.27.1</wiremock.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <liquibase-hibernate5.version>3.8</liquibase-hibernate5.version>
    <liquibase.version>3.8.9</liquibase.version>
    <validation-api.version>2.0.1.Final</validation-api.version>
    <org.hibernate-jpamodelgen.version>5.3.15.Final</org.hibernate-jpamodelgen.version>
    <org.modelmapper.version>2.3.5</org.modelmapper.version>

    <!-- Plugin versions (only those that are not defined in `spring-boot-starter-parent`) -->
    <docker-maven-plugin.version>0.33.0</docker-maven-plugin.version>
    <maven-help-plugin.version>3.2.0</maven-help-plugin.version>
    <maven-site-plugin.version>3.3</maven-site-plugin.version>
    <jacoco-maven-plugin.version>0.8.5</jacoco-maven-plugin.version>
    <maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>
    <maven-jxr-plugin.version>3.0.0</maven-jxr-plugin.version>
    <jdepend-maven-plugin.version>2.0</jdepend-maven-plugin.version>
    <maven-pmd-plugin.version>3.11.0</maven-pmd-plugin.version>
    <findbugs-maven-plugin.version>3.0.5</findbugs-maven-plugin.version>
    <taglist-maven-plugin.version>2.4</taglist-maven-plugin.version>
    <site-maven-plugin.version>0.12</site-maven-plugin.version>
    <heroku-maven-plugin.verion>2.0.16</heroku-maven-plugin.verion>
    <liquibase-maven-plugin.version>3.8.9</liquibase-maven-plugin.version>

    <!-- Spring Boot doesn't have this property... so, this is needed -->
    <maven-surefire-report-plugin.version>3.0.0-M4</maven-surefire-report-plugin.version>

    <!-- Overriding Spring Boot's version so that this version matches Maven Surefire Report Plugin
    version -->
    <maven-surefire-plugin.version>3.0.0-M4</maven-surefire-plugin.version>

    <!-- Do not deploy to maven repo -->
    <maven.deploy.skip>true</maven.deploy.skip>

    <!--Properties
    by profile -->
    <spring.profiles.active>dev</spring.profiles.active>
    <skip.integration.tests>true</skip.integration.tests>
    <skip.unit.tests>false</skip.unit.tests>
    <skip.startlocalpostgres>true</skip.startlocalpostgres>

    <!-- Define "argLine" as a Maven property rather than as part of the configuration of
    maven-surefire-plugin -->
    <argLine>-XX:MaxPermSize=1024m</argLine>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-jpamodelgen</artifactId>
        <version>${org.hibernate-jpamodelgen.version}</version>
      </dependency>
      <dependency>
        <groupId>org.modelmapper</groupId>
        <artifactId>modelmapper</artifactId>
        <version>${org.modelmapper.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <profiles>
    <profile>
      <!-- dev profile. This is the default profile -->
      <id>dev</id>
      <activation>
        <activeByDefault>true</activeByDefault>
      </activation>
    </profile>
    <profile>
      <id>prod</id>
      <properties>
        <spring.profiles.active>prod</spring.profiles.active>
      </properties>
    </profile>
    <profile>
      <!-- The Configuration of the unit-test profile -->
      <id>unit-test</id>
      <properties>
        <spring.profiles.active>test</spring.profiles.active>
      </properties>
    </profile>
    <profile>
      <!-- The Configuration of the integration-test profile -->
      <id>integration-test</id>
      <properties>
        <spring.profiles.active>integration-test</spring.profiles.active>
        <skip.integration.tests>false</skip.integration.tests>
        <skip.unit.tests>true</skip.unit.tests>
        <skip.startlocalpostgres>false</skip.startlocalpostgres>
      </properties>
    </profile>
  </profiles>

  <build>
    <!--Enable
    resource filtering -->
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-help-plugin</artifactId>
          <version>${maven-help-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>${maven-project-info-reports-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jxr-plugin</artifactId>
          <version>${maven-jxr-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>jdepend-maven-plugin</artifactId>
          <version>${jdepend-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-pmd-plugin</artifactId>
          <version>${maven-pmd-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>findbugs-maven-plugin</artifactId>
          <version>${findbugs-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>taglist-maven-plugin</artifactId>
          <version>${taglist-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>com.github.github</groupId>
          <artifactId>site-maven-plugin</artifactId>
          <version>${site-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-report-plugin</artifactId>
          <version>${maven-surefire-report-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-javadoc-plugin</artifactId>
          <version>${maven-javadoc-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-source-plugin</artifactId>
          <version>${maven-source-plugin.version}</version>
        </plugin>
        <!--
          Maven Resources Plugin - handles the copying of project resources to the output directory.
          https://maven.apache.org/plugins/maven-resources-plugin/
        -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-resources-plugin</artifactId>
          <configuration>
            <nonFilteredFileExtensions>
              <nonFilteredFileExtension>pdf</nonFilteredFileExtension>
            </nonFilteredFileExtensions>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>${maven-dependency-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>${maven-site-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>com.heroku.sdk</groupId>
          <artifactId>heroku-maven-plugin</artifactId>
          <version>${heroku-maven-plugin.verion}</version>
        </plugin>
        <plugin>
          <groupId>org.sonarsource.scanner.maven</groupId>
          <artifactId>sonar-maven-plugin</artifactId>
        </plugin>
        <plugin>
          <groupId>org.liquibase</groupId>
          <artifactId>liquibase-maven-plugin</artifactId>
          <version>${liquibase-maven-plugin.version}</version>
        </plugin>
        <plugin>
          <groupId>io.fabric8</groupId>
          <artifactId>docker-maven-plugin</artifactId>
          <version>${docker-maven-plugin.version}</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <!-- 
      Maven Help Plugin - Display active profile in compile phase 
      https://github.com/apache/maven-help-plugin
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-help-plugin</artifactId>
        <executions>
          <execution>
            <id>show-profiles</id>
            <phase>compile</phase>
            <goals>
              <goal>active-profiles</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!--
      Maven Compiler Plugin - Compile the sources of the project.
      https://maven.apache.org/plugins/maven-compiler-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths>
            <!-- Lombok Code Generator -->
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${lombok.version}</version>
            </path>
            <!-- JPA Static Metamodel Generator -->
            <path>
              <groupId>org.hibernate</groupId>
              <artifactId>hibernate-jpamodelgen</artifactId>
              <version>${org.hibernate-jpamodelgen.version}</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>

      <!--
      Enable Spring Boot support.
      http://docs.spring.io/spring-boot/docs/current/maven-plugin/
      -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <configuration>
          <!--
          Create 2 artifacts: one as dependency and another as executable fat JAR
          See
          https://docs.spring.io/spring-boot/docs/current/reference/html/howto-build.html#howto-create-an-additional-executable-jar
          -->
          <classifier>exec</classifier>
        </configuration>
        <executions>
          <execution>
            <id>build-info</id>
            <goals>
              <goal>build-info</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      Versions Maven Plugin - Makes it easier to upgrade plugins and dependencies
      http://www.mojohaus.org/versions-maven-plugin/
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
      </plugin>

      <!--
      Surefire Maven Plugin - Runs unit tests.
      http://maven.apache.org/surefire/maven-surefire-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <!-- The skip.unit.tests property is used to decide whether these tests should be run or
          not -->
          <skipTests>${skip.unit.tests}</skipTests>
          <systemPropertyVariables>
            <!-- Redirect JBoss logging to SLF4J -->
            <org.jboss.logging.provider>slf4j</org.jboss.logging.provider>
            <!-- Set spring active profile -->
            <spring.profiles.active>${spring.profiles.active}</spring.profiles.active>
          </systemPropertyVariables>
        </configuration>
      </plugin>

      <!--
      Maven Failsafe Plugin - Runs integration tests.
      http://maven.apache.org/surefire/maven-failsafe-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <!-- The skip.integration.tests property is used to decide if this plugin should fire or
          not -->
          <skipTests>${skip.integration.tests}</skipTests>
          <systemPropertyVariables>
            <!-- Set spring active profile -->
            <spring.profiles.active>${spring.profiles.active}</spring.profiles.active>
          </systemPropertyVariables>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      Maven Site Plugin - Generates site.
      http://maven.apache.org/plugins/maven-site-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <configuration>
          <relativizeDecorationLinks>false</relativizeDecorationLinks>
        </configuration>
        <executions>
          <!--
          In Maven 3, site:attach-descriptor has been removed from the built-in lifecycle bindings,
          so need to explicitly define `attach-descriptor` goal to pick up src/site/site.xml.
          -->
          <execution>
            <id>attach-descriptor</id>
            <goals>
              <goal>attach-descriptor</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      JaCoCo Maven Plugin - Code coverage report for JVM languages.
      http://www.eclemma.org/jacoco/
      -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <configuration>
          <excludes>
            <exclude>**/generated/**</exclude>
            <exclude>**/scratch/**</exclude>
            <exclude>**/config/**</exclude>
            <exclude>**/model/**</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <id>default-prepare-agent</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>default-prepare-agent-integration</id>
            <goals>
              <goal>prepare-agent-integration</goal>
            </goals>
          </execution>
          <execution>
            <id>default-report</id>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
          <execution>
            <id>default-report-integration</id>
            <goals>
              <goal>report-integration</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      Maven Enforcer Plugin - Bans certain dependencies and ensure minimum Maven version is used.
      http://maven.apache.org/enforcer/maven-enforcer-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <!--
          If these banned dependencies exist, fail the build right away.
          Xalan, Xerces and Xml-APIs - Known to cause problem when deployed to server. Use the ones
          provided by server.
          See http://stackoverflow.com/questions/11677572/dealing-with-xerces-hell-in-java-maven
          -->
          <execution>
            <id>enforce-banned-dependencies</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <fail>true</fail>
              <rules>
                <bannedDependencies>
                  <excludes>
                    <exclude>xalan</exclude>
                    <exclude>xerces</exclude>
                    <exclude>xml-apis</exclude>
                  </excludes>
                </bannedDependencies>
              </rules>
            </configuration>
          </execution>
          <!--
          Ensures everyone is using at least the specified Maven version or later.
          -->
          <execution>
            <id>enforce-maven</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireMavenVersion>
                  <version>${maven.version}</version>
                </requireMavenVersion>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
      Maven Source Plugin - Generates source JAR file.
      https://maven.apache.org/plugins/maven-source-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
      Apache Maven Dependency Plugin - Manipulate artifacts.
      https://maven.apache.org/plugins/maven-dependency-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <!-- 
          Unpack the resulting jar 
          -->
          <execution>
            <id>unpack</id>
            <phase>package</phase>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>${project.groupId}</groupId>
                  <artifactId>${project.artifactId}</artifactId>
                  <version>${project.version}</version>
                  <classifier>exec</classifier>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
      Maven Javadoc Plugin - Generates Javadoc.
      https://maven.apache.org/plugins/maven-javadoc-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <!--
          Shuts off non-error and non-warning messages, leaving only the warnings and errors
          appear, making them easier to view.
          -->
          <quiet>true</quiet>
        </configuration>
      </plugin>

      <plugin>
        <!-- 
        Maven Liquibase Plugin - Generates liquibase changesets.
        https://www.liquibase.org/documentation/maven/index.html
        -->
        <groupId>org.liquibase</groupId>
        <artifactId>liquibase-maven-plugin</artifactId>
        <configuration>
          <verbose>true</verbose>
          <logging>debug</logging>
          <!-- see: http://blog.nutpan.com/2012/03/liquibase-maven-plugin-issue-with-non.html -->
          <promptOnNonLocalDatabase>false</promptOnNonLocalDatabase>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.liquibase.ext</groupId>
            <artifactId>liquibase-hibernate5</artifactId>
            <version>${liquibase-hibernate5.version}</version>
            <exclusions>
              <exclusion>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-core</artifactId>
              </exclusion>
              <exclusion>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-entitymanager</artifactId>
              </exclusion>
              <exclusion>
                <groupId>org.hibernate</groupId>
                <artifactId>hibernate-envers</artifactId>
              </exclusion>
              <exclusion>
                <groupId>org.hibernate.javax.persistence</groupId>
                <artifactId>hibernate-jpa-2.0-api</artifactId>
              </exclusion>
            </exclusions>
          </dependency>
          <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <version>${project.parent.version}</version>
          </dependency>
          <dependency>
            <groupId>javax.validation</groupId>
            <artifactId>validation-api</artifactId>
            <version>${validation-api.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- 
      Maven plugin for running and creating Docker images
      https://github.com/fabric8io/docker-maven-plugin
      -->
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <extensions>true</extensions>
        <configuration>
          <images>
            <image>
              <alias>postgres</alias>
              <name>postgres:12</name>
              <run>
                <network>
                  <name>sgi-network</name>
                  <alias>postgres</alias>
                </network>
                <wait>
                  <log>database system is ready to accept connections</log>
                  <time>20000</time>
                </wait>
                <env>
                  <POSTGRES_USER>postgres</POSTGRES_USER>
                  <POSTGRES_PASSWORD>admin</POSTGRES_PASSWORD>
                  <POSTGRES_DB>db</POSTGRES_DB>
                </env>
              </run>
            </image>
          </images>
          <skip>${skip.startlocalpostgres}</skip>
        </configuration>
        <executions>
          <execution>
            <id>docker:start</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>docker:stop</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <reporting>
    <plugins>
      <!--
      Maven Project Info Reports Plugin - Generates reports information about the project.
      https://maven.apache.org/plugins/maven-project-info-reports-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <configuration>
          <dependencyDetailsEnabled>false</dependencyDetailsEnabled>
        </configuration>
      </plugin>

      <!--
      Maven Surefire Reports Plugin - Parses generated test results from both unit tests and integration
      tests.
      http://maven.apache.org/surefire/maven-surefire-report-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>failsafe-report-only</report>
              <report>report-only</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>

      <!--
      JaCoCo Maven Plugin - Code coverage report for JVM languages.
      http://www.eclemma.org/jacoco/
      -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <reportSets>
          <reportSet>
            <reports>
              <report>report</report>
            </reports>
          </reportSet>
        </reportSets>
      </plugin>

      <!--
      Maven Javadoc Plugin - Generates Javadoc.
      https://maven.apache.org/plugins/maven-javadoc-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <configuration>
          <!--
          Shuts off non-error and non-warning messages, leaving only the warnings and errors
          appear, making them easier to view.
          -->
          <quiet>true</quiet>
        </configuration>
      </plugin>

      <!--
      Maven JXR Plugin - Generates a cross-reference of the project's sources.
      http://maven.apache.org/plugins/maven-jxr-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jxr-plugin</artifactId>
      </plugin>

      <!--
      JDepend Maven Plugin - Generates design quality metrics for each Java package.
      http://www.mojohaus.org/jdepend-maven-plugin/
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>jdepend-maven-plugin</artifactId>
      </plugin>

      <!--
      Maven PMD Plugin - Generates PMD and CPD reports.
      http://maven.apache.org/plugins/maven-pmd-plugin/
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <configuration>
          <!--suppress
          MavenModelInspection -->
          <targetJdk>${jdk.version}</targetJdk>
          <excludes>
            <exclude>**/generated/**</exclude>
            <exclude>**/scratch/**</exclude>
          </excludes>
          <excludeRoots>
            <excludeRoot>target/generated-sources</excludeRoot>
          </excludeRoots>
        </configuration>
      </plugin>

      <!--
      FindBugs Maven Plugin - Inspects Java bytecode for occurrences of bug patterns.
      http://www.mojohaus.org/findbugs-maven-plugin/
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <configuration>
          <xmlOutput>true</xmlOutput>
        </configuration>
      </plugin>

      <!--
      TagList Maven Plugin - Generates a report on various tags found in the code.
      http://www.mojohaus.org/taglist-maven-plugin/
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>taglist-maven-plugin</artifactId>
        <configuration>
          <tagListOptions>
            <tagClasses>
              <tagClass>
                <displayName>Todo</displayName>
                <tags>
                  <tag>
                    <matchString>todo</matchString>
                    <matchType>ignoreCase</matchType>
                  </tag>
                  <tag>
                    <matchString>FIXME</matchString>
                    <matchType>exact</matchType>
                  </tag>
                </tags>
              </tagClass>
              <tagClass>
                <displayName>Cleanup</displayName>
                <tags>
                  <tag>
                    <matchString>@deprecated</matchString>
                    <matchType>exact</matchType>
                  </tag>
                </tags>
              </tagClass>
            </tagClasses>
          </tagListOptions>
        </configuration>
      </plugin>
    </plugins>
  </reporting>
</project>