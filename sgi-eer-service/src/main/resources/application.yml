server:
  port : 4290
  error:
    whitelabel:
      # Disble the default error page displayed in browsers in case of a server error
      enabled: false
sgi:
  time-zone: "Europe/Madrid"
spring:
  profiles:
    # Set spring-profile using maven
    active: @spring.profiles.active@
  datasource:
    # Make sure database schema is created (schema.sql is executed): always/never
    initialization-mode: always
    # We use a H2 in file database with PostgreSQL compatibility mode
    url: "jdbc:h2:./target/db/eer;MODE=PostgreSQL;DB_CLOSE_ON_EXIT=FALSE"
    driver-class-name: org.h2.Driver
    username: eer
    password: eer
  # H2 console
  h2:
    console:
      enabled: false
  jpa:
    hibernate:
      # Make sure Hibernate will not use the entities to create, update or validate the database
      # validate | update | create | create-drop
      ddl-auto: none
    # Disable Open Session In View
    open-in-view: false
    # Extra Hibernate properties
    properties:
      hibernate:
        # We use a H2 database with PostgreSQL compatibility mode
        dialect: org.hibernate.dialect.H2Dialect
        # Set default Hibernate schema
        '[default_schema]': ${spring.datasource.username}
        jdbc:
          # see: https://vladmihalcea.com/how-to-store-date-time-and-timestamps-in-utc-time-zone-with-jdbc-and-hibernate/
          '[time_zone]': UTC
  liquibase:
    # No Liquibase contexts
    contexts: none
    # Default database schema
    default-schema: ${spring.jpa.properties.hibernate.[default_schema]}
    # Enable Liquibase
    enabled: true
    # Schema to use for Liquibase objects
    liquibase-schema: ${spring.jpa.properties.hibernate.[default_schema]}
    # Set Liquibase changeLog parameters
    parameters:
      schemaPrefix: ${spring.jpa.properties.hibernate.[default_schema]}.
  mvc:
    # Whether a "NoHandlerFoundException" should be thrown if no Handler was found to process a request
    throw-exception-if-no-handler-found: true
  resources:
    # Disable the static resource handling
    add-mappings: false
  security:
    oauth2:
      client:
        registration:
          # "sgi" is the id used inside the redirect-uri-template, must be the same as your realm
          sgi:
            authorization-grant-type: authorization_code
            client-id: front
            client-name: SGI (user login)
            provider: keycloak
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: "openid,profile"
        provider:
          keycloak:
            issuer-uri: http://sgi-auth:8080/auth/realms/sgi
            user-name-attribute: user_ref_id
      resourceserver:
        jwt:
          # JSON Web Key endpoint (with the cryptographic key to validate JSON Web Signature)
          jwk-set-uri: ${spring.security.oauth2.client.provider.keycloak.issuer-uri}/protocol/openid-connect/certs
          user-name-claim: user_ref_id
---
spring:
  profiles: dev
  liquibase:
    # Set Liquibase contexts same as spring profiles
    contexts: dev
#  # H2 console
#  h2:
#    console:
#      enabled: true
#      path: /h2-console
#      settings:
#        web-allow-others: true
#  security:
#    oauth2:
#      # Enable login page if JWT not provided (enable only for development)
#      enable-login: true
#    # Disable CSRF (disable only for development)
#    csrf:
#      enable: false
#    # Disable X-Frame-Options (disable only for development)
#    frameoptions:
#      enable: false
logging:
  level:
    org:
      hibernate:
        # Log the SQL statements
        SQL: DEBUG
        type:
          descriptor:
            sql:
              # Log SQL query parameter binding
              BasicBinder: TRACE
      springframework:
        jdbc:
          core:
            # Log JdbcTemplate Queries
            JdbcTemplate: DEBUG
            StatementCreatorUtils: TRACE
---
spring:
  profiles: dev-oracle
  datasource:
    # Make sure database schema is not created (schema.sql is not executed): always/never
    initialization-mode: never
    # We use Oracle database
    url: jdbc:oracle:thin:@oracle12c:1521/ORCLPDB1.localdomain
    driver-class-name: oracle.jdbc.OracleDriver
    username: EER_SGI
    password: EER_SGI
  jpa:
    hibernate:
      # Make sure Hibernate will not use the entities to create, update or validate the database
      # validate | update | create | create-drop
      ddl-auto: none
    properties:
      hibernate:
        # We use Oracle database
        dialect: org.hibernate.dialect.Oracle12cDialect
  liquibase:
    # Set Liquibase contexts same as spring profiles
    contexts: dev
logging:
  level:
    org:
      hibernate:
        # Log the SQL statements
        SQL: DEBUG
        type:
          descriptor:
            sql:
              # Log SQL query parameter binding
              BasicBinder: TRACE
      springframework:
        jdbc:
          core:
            # Log JdbcTemplate Queries
            JdbcTemplate: DEBUG
            StatementCreatorUtils: TRACE
---
spring:
  profiles: prod
  datasource:
    # We use PostgreSQL database
    url: "jdbc:postgresql://postgres:5432/eer"
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: admin
  jpa:
    properties:
      hibernate:
        # We use a PostgreSQL database
        dialect: org.hibernate.dialect.PostgreSQL95Dialect
        # Set default Hibernate Schema
        '[default_schema]': eer
  security:
    oauth2:
      client:
        provider:
          keycloak:
            issuer-uri: http://sgi-auth:8080/auth/realms/sgi
---
spring:
  # Set spring-profile
  profiles: test
  datasource:
    # We use a H2 in memory database
    url: "jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"
  jpa:
    properties:
      hibernate:
        # Set default Hibernate Schema
        '[default_schema]': test
  liquibase:
    # Set Liquibase contexts
    contexts: test
  security:
    oauth2:
      resourceserver:
        jwt:
          user-name-claim: preferred_username
  test:
    database:
      # By default, tests annotated with @DataJpaTest will use an embedded in-memory database (replacing any explicit or usually auto-configured DataSource).
      replace: none
---
spring:
  # Set spring-profile
  profiles: test-postgres
  datasource:
    # We use PostgreSQL database
    url: "jdbc:postgresql://postgres:5432/db"
    driver-class-name: org.postgresql.Driver
    username: postgres
    password: admin
  jpa:
    properties:
      hibernate:
        # We use a PostgreSQL database
        dialect: org.hibernate.dialect.PostgreSQL95Dialect
        # Set default Hibernate Schema
        '[default_schema]': test
  liquibase:
    # Set Liquibase contexts
    contexts: test
  security:
    oauth2:
      resourceserver:
        jwt:
          user-name-claim: preferred_username
  test:
    database:
      # By default, tests annotated with @DataJpaTest will use an embedded in-memory database (replacing any explicit or usually auto-configured DataSource).
      replace: none